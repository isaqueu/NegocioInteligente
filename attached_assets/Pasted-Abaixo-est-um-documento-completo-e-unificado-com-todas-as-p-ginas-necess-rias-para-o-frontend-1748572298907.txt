Abaixo est√° um **documento completo e unificado** com **todas as p√°ginas necess√°rias para o frontend** do sistema **KIGI ‚Äì Sistema Financeiro Familiar**, com os **campos, fun√ß√µes, integra√ß√µes e descri√ß√µes detalhadas**, pronto para ser usado como prompt para outra IA (por exemplo, uma IA geradora de telas ou c√≥digo frontend).

Esse documento foca em **texto claro, completo e t√©cnico**, mantendo a ordem cronol√≥gica natural de navega√ß√£o no sistema, incluindo a **l√≥gica de parcelas dentro das sa√≠das financeiras**, conforme solicitado.

---

# üìò Estrutura Completa do Frontend ‚Äì KIGI: Sistema Financeiro Familiar

## üîê P√°gina de Login

**Objetivo**: Autenticar o usu√°rio via login e senha.

**Campos**:

* `nomeUsuario`: Campo de texto.
* `senha`: Campo de senha.

**Bot√µes**:

* \[Entrar]

**Fun√ß√µes**:

```ts
async function autenticarUsuario(nomeUsuario: string, senha: string): Promise<Usuario>
```

---

## üè† P√°gina Inicial / Dashboard

**Objetivo**: Apresentar um resumo da situa√ß√£o financeira da fam√≠lia e dos usu√°rios.

**Componentes**:

* Cart√µes com:

  * Saldo da fam√≠lia
  * Saldo por membro
* Gr√°fico de gastos por classifica√ß√£o
* Lista de transa√ß√µes recentes (entradas e sa√≠das)
* Lista de parcelas pendentes agrupadas por m√™s

**Fun√ß√µes**:

```ts
async function obterResumoFinanceiro(): Promise<ResumoFinanceiro>
async function obterUltimasTransacoes(): Promise<Transacao[]>
```

---

## üë§ P√°gina de Gest√£o de Usu√°rios

**Objetivo**: Cadastrar, listar, editar e excluir usu√°rios.

**Campos do formul√°rio**:

* `nome`: Campo de texto
* `senha`: Campo de senha
* `papel`: Dropdown com op√ß√µes `pai`, `mae`, `filho`, `filha`

**A√ß√µes**:

* Cadastrar novo usu√°rio
* Editar usu√°rio existente
* Excluir usu√°rio
* Visualizar detalhes

**Fun√ß√µes**:

```ts
async function listarUsuarios(): Promise<Usuario[]>
async function criarUsuario(usuario: UsuarioInput): Promise<void>
async function editarUsuario(id: number, dados: UsuarioInput): Promise<void>
async function excluirUsuario(id: number): Promise<void>
```

---

## üí∞ P√°gina de Registro de Entrada Financeira

**Objetivo**: Registrar uma entrada (ganho) para um membro da fam√≠lia.

**Campos**:

* `usuarioTitularId`: Sele√ß√£o do membro da fam√≠lia beneficiado
* `dataReferencia`: Campo de data
* `valor`: Campo num√©rico
* `empresaPagadoraId`: Dropdown com empresas
* `dataHoraRegistro`: Preenchido automaticamente
* `usuarioRegistroId`: Obtido do login

**Fun√ß√µes**:

```ts
async function listarEmpresas(): Promise<Empresa[]>
async function registrarEntrada(entrada: EntradaInput): Promise<void>
```

---

## üí∏ P√°gina de Registro de Sa√≠da Financeira

**Objetivo**: Registrar uma sa√≠da (despesa), que pode ser √† vista ou parcelada.

### üîπ Campos Gerais

* `usuariosTitularesIds`: Sele√ß√£o m√∫ltipla dos usu√°rios que participar√£o da sa√≠da
* `empresaId`: Empresa recebedora
* `dataSaida`: Data da sa√≠da
* `tipoPagamento`: 'avista' ou 'parcelado'
* `observacao`: Campo de texto (opcional)
* `usuarioRegistroId`: Obtido do login
* `dataHoraRegistro`: Preenchido automaticamente

### üîπ Itens da Sa√≠da

* Lista din√¢mica com:

  * `produtoId`: Sele√ß√£o via c√≥digo de barras ou lista
  * `quantidade`: N√∫mero
  * `precoUnitario`: Preenchido automaticamente com base no produto

### üîπ Campos Adicionais para Parcelamento

* `numeroParcelas`: Campo num√©rico
* `dataPrimeiraParcela`: Campo de data

**Regras**:

* Se `tipoPagamento` for `'parcelado'`, o sistema deve:

  * Dividir o valor total igualmente entre as parcelas (ou com ajuste na √∫ltima parcela)
  * Criar uma sa√≠da "pai" para controle
  * Criar N sa√≠das "filhas" (1 por parcela) com os seguintes dados:

    * `saidaOriginalId`: Refer√™ncia √† sa√≠da "pai"
    * `numeroParcela`: 1, 2, ...
    * `dataVencimento`: baseada na data inicial + meses
    * `valorParcela`
    * `status`: `'paga' | 'vencida' | 'a vencer'`

**Fun√ß√µes**:

```ts
async function listarEmpresas(): Promise<Empresa[]>
async function listarProdutos(): Promise<Produto[]>
async function registrarSaida(saida: SaidaInput): Promise<void>
```

---

## üì¶ P√°gina de Cadastro de Produtos/Servi√ßos

**Objetivo**: Gerenciar os produtos e servi√ßos que comp√µem uma sa√≠da.

**Campos**:

* `codigoBarras`: Campo de leitura via c√¢mera (opcional)
* `nome`: Campo de texto
* `unidade`: Campo de texto (ex: kg, l, unidade)
* `classificacao`: Campo de texto ou sele√ß√£o (alimento, sa√∫de, etc.)
* `precoUnitario`: Campo num√©rico

**A√ß√µes**:

* Leitura autom√°tica por c√≥digo de barras
* Cadastro, edi√ß√£o e exclus√£o

**Fun√ß√µes**:

```ts
async function listarProdutos(): Promise<Produto[]>
async function criarProduto(produto: ProdutoInput): Promise<void>
async function editarProduto(id: number, dados: ProdutoInput): Promise<void>
async function excluirProduto(id: number): Promise<void>
```

---

## üè¢ P√°gina de Cadastro de Empresas

**Objetivo**: Gerenciar empresas envolvidas (pagadoras ou recebedoras).

**Campos**:

* `nome`: Campo de texto

**A√ß√µes**:

* Cadastro, edi√ß√£o, exclus√£o

**Fun√ß√µes**:

```ts
async function listarEmpresas(): Promise<Empresa[]>
async function criarEmpresa(empresa: EmpresaInput): Promise<void>
async function editarEmpresa(id: number, dados: EmpresaInput): Promise<void>
async function excluirEmpresa(id: number): Promise<void>
```

---

## üìÜ P√°gina de Controle de Parcelas

**Objetivo**: Visualizar e controlar o pagamento de parcelas geradas automaticamente.

**Componentes**:

* Lista de parcelas agrupadas por m√™s
* Filtros por status (paga, vencida, a vencer)
* Campo de data de pagamento
* Bot√£o "Marcar como paga"

**Fun√ß√µes**:

```ts
async function listarParcelasPendentes(): Promise<Parcela[]>
async function registrarPagamentoParcela(parcelaId: number, dataPagamento: Date): Promise<void>
```

---

## üìä P√°gina de Relat√≥rios

**Objetivo**: Visualizar dados filtrados com agrupamentos e gr√°ficos.

**Filtros**:

* Data inicial / final
* Usu√°rio
* Empresa
* Tipo: entrada ou sa√≠da
* Forma de pagamento: √† vista ou parcelado
* Classifica√ß√£o do produto/servi√ßo

**Componentes**:

* Tabela de transa√ß√µes
* Saldo por membro da fam√≠lia
* Gr√°fico de gastos por classifica√ß√£o
* Exportar CSV/PDF (opcional)

**Fun√ß√µes**:

```ts
async function gerarRelatorio(filtros: FiltrosRelatorio): Promise<RelatorioFinanceiro>
```

---

## üö™ P√°gina de Logout

**Objetivo**: Encerrar sess√£o do usu√°rio e limpar estado local.

**A√ß√£o**:

* Redireciona para login

**Fun√ß√£o**:

```ts
function logout(): void
```

---

## üì¶ Componentes Reutiliz√°veis

**LeitorCodigoBarras**

* Componente com acesso √† c√¢mera do dispositivo
* Retorna o c√≥digo escaneado

```ts
function LeitorCodigoBarras({ onScan }: { onScan: (codigo: string) => void }): JSX.Element
```

**SelecionarUsuarios**

* Lista de checkboxes para sele√ß√£o m√∫ltipla de membros da fam√≠lia

**TabelaItensSaida**

* Tabela din√¢mica de produtos/servi√ßos com op√ß√µes de adicionar/remover

**ResumoFinanceiroCard**

* Card com o saldo total ou individual

**StatusParcelaTag**

* Badge de status: `paga`, `vencida`, `a vencer`
